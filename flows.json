[
    {
        "id": "ef1306654341cf48",
        "type": "tab",
        "label": "Inputs",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cde9bf556ca805e7",
        "type": "tab",
        "label": "Shift Efficiency FB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c6238f4648e04a71",
        "type": "tab",
        "label": "Downtime FB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0f64723347321243",
        "type": "subflow",
        "name": "MQTT Subscribe",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#C0DEED",
        "icon": "node-red/bridge.svg",
        "status": {
            "x": 600,
            "y": 80,
            "wires": [
                {
                    "id": "7020144799e1a469",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "022310190439f221",
        "type": "junction",
        "z": "c6238f4648e04a71",
        "x": 740,
        "y": 320,
        "wires": [
            [
                "f726fb9bd416c0c6"
            ]
        ]
    },
    {
        "id": "5ee64d5f31741904",
        "type": "mqtt-broker",
        "name": "",
        "broker": "128.121.5.60",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "6034ba1e7c15fb9e",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "128.121.5.60",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "pscdb",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "pscontrols",
        "userFieldType": "str",
        "password": "controls",
        "passwordFieldType": "str"
    },
    {
        "id": "a8728916668fe40f",
        "type": "http request",
        "z": "0f64723347321243",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "128.121.14.31",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 80,
        "wires": [
            [
                "7020144799e1a469"
            ]
        ]
    },
    {
        "id": "546ed1b50d4e809d",
        "type": "inject",
        "z": "0f64723347321243",
        "name": "Subscribe",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"code\":10,\"cid\":4711,\"adr\":\"/timer[1]/counter/datachanged/subscribe\",\"data\":{\"callback\":\"mqtt://128.121.5.60:1883/process_data\",\"datatosend\":[\"/iolinkmaster/port[1]/iolinkdevice/pdin\"],\"duration\":\"lifetime\"}}",
        "payloadType": "json",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "a8728916668fe40f"
            ]
        ]
    },
    {
        "id": "836f1d0d6b18af15",
        "type": "comment",
        "z": "0f64723347321243",
        "name": "Subscribe on start",
        "info": "",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "7020144799e1a469",
        "type": "function",
        "z": "0f64723347321243",
        "name": "set status",
        "func": "if (msg.statusCode == 200)\n{\n    msg.payload = {\n        fill : \"green\", \n        shape : \"dot\",\n        text : \"Subscribed\"\n    };\n\n}\nelse{\n    msg.payload = {\n        fill: \"red\",\n        shape: \"dot\",\n        text: \"Disconnected\"\n    };\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "2a81fdde9f222f38",
        "type": "mqtt in",
        "z": "ef1306654341cf48",
        "name": "process data",
        "topic": "process_data",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5ee64d5f31741904",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 160,
        "wires": [
            [
                "671c17ba0c365c38",
                "c93056954fe823a5",
                "2ab37be848604cd0"
            ]
        ]
    },
    {
        "id": "671c17ba0c365c38",
        "type": "function",
        "z": "ef1306654341cf48",
        "name": "parse press angle data",
        "func": "if (msg.payload.data.payload[\"/iolinkmaster/port[1]/iolinkdevice/pdin\"].data){\n\nvar process_data = msg.payload.data.payload[\"/iolinkmaster/port[1]/iolinkdevice/pdin\"].data;\nvar counter = process_data.substring(0, 8); // grabs section of process data that contains encoder counter\nglobal.set('press_angle', 360 * ((parseInt(counter, 16) % 4096) / 4096)); // converts counter value from hex to INT\nmsg.payload = global.get('press_angle');\n\n    node.status({ fill: \"blue\", shape: \"dot\", text: msg.payload.toFixed(2) });\n\nreturn msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 100,
        "wires": [
            [
                "a4d4a07606b95a9c"
            ]
        ]
    },
    {
        "id": "d486887b6dd22966",
        "type": "comment",
        "z": "ef1306654341cf48",
        "name": "subscribe to RMU300 data from master block",
        "info": "",
        "x": 210,
        "y": 60,
        "wires": []
    },
    {
        "id": "c93056954fe823a5",
        "type": "function",
        "z": "ef1306654341cf48",
        "name": "parse live spm data",
        "func": "var process_data = msg.payload.data.payload[\"/iolinkmaster/port[1]/iolinkdevice/pdin\"].data;\nvar live_spm = 0; \n\nprocess_data = process_data.substring(12, 20);\nglobal.set('live_spm', parseInt(process_data, 16) * 0.1) ;\n\nmsg.payload = global.get('live_spm');\n\nnode.status({ fill: \"blue\", shape: \"dot\", text: msg.payload.toFixed(1) });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "2ab37be848604cd0",
        "type": "function",
        "z": "ef1306654341cf48",
        "name": "parse stroke mode",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "a4d4a07606b95a9c",
        "type": "link out",
        "z": "ef1306654341cf48",
        "name": "(Inputs) Press angle out",
        "mode": "link",
        "links": [
            "92d8ea3b5543c66e",
            "ca1ac204874f1c83"
        ],
        "x": 515,
        "y": 100,
        "wires": []
    },
    {
        "id": "e7ce6d7ca0cfc722",
        "type": "subflow:0f64723347321243",
        "z": "ef1306654341cf48",
        "name": "",
        "x": 120,
        "y": 100,
        "wires": []
    },
    {
        "id": "a0cf97abb26fd041",
        "type": "inject",
        "z": "ef1306654341cf48",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "b84c2a97f017ae71"
            ]
        ]
    },
    {
        "id": "b84c2a97f017ae71",
        "type": "postgresql",
        "z": "ef1306654341cf48",
        "name": "",
        "query": "DELETE FROM pph;\nCOPY pph(asset, job, shifthour, pph) FROM '/home/controls-orin-1/Desktop/pscMasterPPH.csv' DELIMITER ',' CSV HEADER;",
        "postgreSQLConfig": "6034ba1e7c15fb9e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "60f0a68aec7e2236",
        "type": "comment",
        "z": "ef1306654341cf48",
        "name": "refresh pph based on csv file once per day",
        "info": "",
        "x": 200,
        "y": 340,
        "wires": []
    },
    {
        "id": "bd45941e6c944cc7",
        "type": "inject",
        "z": "cde9bf556ca805e7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 05 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "6c632faccbb0e219"
            ]
        ]
    },
    {
        "id": "782f50628b4e88bb",
        "type": "comment",
        "z": "cde9bf556ca805e7",
        "name": "determine active shift",
        "info": "",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "91b7f31d9fbcf493",
        "type": "inject",
        "z": "cde9bf556ca805e7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 01 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "843965800cb56943"
            ]
        ]
    },
    {
        "id": "29aa17f635819cce",
        "type": "inject",
        "z": "cde9bf556ca805e7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 21 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "81dad3eec18fdae9"
            ]
        ]
    },
    {
        "id": "6c632faccbb0e219",
        "type": "change",
        "z": "cde9bf556ca805e7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "active_shift",
                "pt": "global",
                "to": "D",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "843965800cb56943",
        "type": "change",
        "z": "cde9bf556ca805e7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "active_shift",
                "pt": "global",
                "to": "A",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "81dad3eec18fdae9",
        "type": "change",
        "z": "cde9bf556ca805e7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "active_shift",
                "pt": "global",
                "to": "N",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "92d8ea3b5543c66e",
        "type": "link in",
        "z": "cde9bf556ca805e7",
        "name": "(Shift Efficiency FB) Press angle in",
        "links": [
            "a4d4a07606b95a9c"
        ],
        "x": 45,
        "y": 300,
        "wires": [
            [
                "4268820a57df8a04"
            ]
        ]
    },
    {
        "id": "4268820a57df8a04",
        "type": "function",
        "z": "cde9bf556ca805e7",
        "name": "function 1",
        "func": "global.set('press_angle', msg.payload);\n\nif (!(global.get('stroke_count')))\n{\n    global.set('stroke_count', 0);\n};\n\nif (msg.payload >= 320 && msg.payload <= 330) {\n    if (flow.get('oneshot') == true) {\n        global.set('stroke_count', global.get('stroke_count') + 1);\n        flow.set('oneshot', false);\n    }\n}\nelse flow.set('oneshot', true);\n\nmsg.payload = {\n    shifthour: global.get('active_shift_hour'), \n    shift: global.get('active_shift')\n};\nnode.status({ fill: \"blue\", shape: \"dot\", text: global.get('stroke_count')});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set('oneshot', false);\n",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 300,
        "wires": [
            [
                "50c171c7337d6f71"
            ]
        ]
    },
    {
        "id": "8a0563cf63dfd1ac",
        "type": "comment",
        "z": "cde9bf556ca805e7",
        "name": "increment stroke based on press angle",
        "info": "",
        "x": 180,
        "y": 260,
        "wires": []
    },
    {
        "id": "96e6c59667913a3c",
        "type": "postgresql",
        "z": "cde9bf556ca805e7",
        "name": "",
        "query": "INSERT INTO strokedata (date, asset, shifthour, shift) \nVALUES (NOW() AT TIME ZONE 'America/New_York', 'P04', {{{msg.payload.shifthour}}}, {{{msg.payload.shift}}});",
        "postgreSQLConfig": "6034ba1e7c15fb9e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 470,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "f708bb888c362e55",
        "type": "comment",
        "z": "cde9bf556ca805e7",
        "name": "send stroke id and timestamp to local db",
        "info": "",
        "x": 560,
        "y": 260,
        "wires": []
    },
    {
        "id": "50c171c7337d6f71",
        "type": "rbe",
        "z": "cde9bf556ca805e7",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload.stroke",
        "topi": "topic",
        "x": 310,
        "y": 300,
        "wires": [
            [
                "96e6c59667913a3c"
            ]
        ]
    },
    {
        "id": "5f3cfe34af8c0bd6",
        "type": "comment",
        "z": "cde9bf556ca805e7",
        "name": "calculate shift KPIs",
        "info": "",
        "x": 130,
        "y": 520,
        "wires": []
    },
    {
        "id": "3e6e190205588258",
        "type": "comment",
        "z": "cde9bf556ca805e7",
        "name": "calculate hourly KPIs",
        "info": "",
        "x": 140,
        "y": 360,
        "wires": []
    },
    {
        "id": "1e3cdd0139c3829b",
        "type": "cronplus",
        "z": "cde9bf556ca805e7",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 45 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 120,
        "y": 420,
        "wires": [
            [
                "995a31b07349e407",
                "dddbe3cbe4f32c78"
            ]
        ]
    },
    {
        "id": "908b9abda5cd6779",
        "type": "postgresql",
        "z": "cde9bf556ca805e7",
        "name": "",
        "query": "SELECT pph FROM pphdata\nWHERE asset = 'P04' AND \njob = 'MRFS-STAMP6RR2A' AND \nshifthour =  '{{{msg.payload}}}';\nSELECT COUNT(*) from strokedata where date >= now() - interval '1 hours';",
        "postgreSQLConfig": "6034ba1e7c15fb9e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 470,
        "y": 400,
        "wires": [
            [
                "8374969604ff5022"
            ]
        ]
    },
    {
        "id": "995a31b07349e407",
        "type": "function",
        "z": "cde9bf556ca805e7",
        "name": "function 2",
        "func": "function map_hours(currentHour) {\n    const mapping = {\n        21:1, 22:2, 23:3, 0:4, 1:5, 2:6, 3:7, 4:8, 5:1, 6:2, 7:3, 8:4, 9:5, 10:6, 11:7, 12:8, 13:1, 14:2, 15:3, 16:4, 17:5, 18:6, 19:7, 20:8 \n    }\n\n    var shift_hour = mapping[currentHour];\n    return shift_hour;\n}\n\nconst now = new Date();\nconst currentHour = now.getHours();\n\nglobal.set('active_shift_hour', map_hours(currentHour));\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "dddbe3cbe4f32c78",
        "type": "function",
        "z": "cde9bf556ca805e7",
        "name": "function 3",
        "func": "function map_hours(currentHour) {\n    const mapping = {\n        21:8, 22:1, 23:2, 0:3, 1:4, 2:5, 3:6, 4:7, \n        5:8, 6:1, 7:2, 8:3, 9:4, 10:5, 11:6, 12:7, \n        13:8, 14:1, 15:2, 16:3, 17:4, 18:5, 19:6, 20:7 \n    }\n\n    var shift_hour = mapping[currentHour];\n    return shift_hour;\n}\n\nconst now = new Date();\nconst currentHour = now.getHours();\n\nglobal.set('last_shift_hour', map_hours(currentHour));\nmsg.payload = global.get('last_shift_hour');\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 400,
        "wires": [
            [
                "908b9abda5cd6779"
            ]
        ]
    },
    {
        "id": "8374969604ff5022",
        "type": "function",
        "z": "cde9bf556ca805e7",
        "name": "Calc hourly eff",
        "func": "let hourly_eff = Number(msg.payload[1].count)/ msg.payload[0].pph;\n\nlet date = new Date;\nlet hour = date.getHours();\nlet shift = \"\"\nif (hour >5 && hour <= 13)\n{\n shift = \"D\";\n\n}\nelse if (hour >13 && hour <= 21)\n{\n shift = \"A\";\n\n}\nelse{\n    shift = \"N\"\n}\n\nmsg.payload = {\n    eff: hourly_eff,\n    shifthour: global.get('last_shift_hour'),\n    asset : \"P04\",\n    current_shift: shift \n}\n\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 400,
        "wires": [
            [
                "482f6305b3103526"
            ]
        ]
    },
    {
        "id": "5c2b3b7508f5a369",
        "type": "cronplus",
        "z": "cde9bf556ca805e7",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "45 5,13,21 * * * ",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 120,
        "y": 580,
        "wires": [
            [
                "2fc253b015b8841f"
            ]
        ]
    },
    {
        "id": "482f6305b3103526",
        "type": "postgresql",
        "z": "cde9bf556ca805e7",
        "name": "",
        "query": "INSERT INTO hourlydata(hour, shifthour, efficiency, asset, shift)\nVALUES(Now(), {{{msg.payload.shifthour}}},{{{msg.payload.eff}}}, '{{{msg.payload.asset}}}', '{{{msg.payload.current_shift}}}')",
        "postgreSQLConfig": "6034ba1e7c15fb9e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 890,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "a121562e04632241",
        "type": "postgresql",
        "z": "cde9bf556ca805e7",
        "name": "",
        "query": "SELECT COUNT(id) FROM strokedata WHERE date >= NOW() - INTERVAL '8 hour';\nSELECT efficiency from hourlydata \n --WHERE shift = '{{{msg.payload}}}'\nWHERE shift = 'D'\nORDER BY ID DESC LIMIT 8; \nSELECT sum(downtime) from downtime where startdate >= Now() - INTERVAL '8 hour';\n\n",
        "postgreSQLConfig": "6034ba1e7c15fb9e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 450,
        "y": 580,
        "wires": [
            [
                "445908a2db8b4404"
            ]
        ]
    },
    {
        "id": "2fc253b015b8841f",
        "type": "function",
        "z": "cde9bf556ca805e7",
        "name": "function 6",
        "func": "let date = new Date;\n\nlet hour = date.getHours();\nlet shift = \"\";\n\nif (hour == 13){\n    shift = \"D\";\n\n}\nelse if (hour == 21){\n\n    shift = \"A\";\n}\nelse shift = \"N\";\n\nmsg.payload = shift;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 580,
        "wires": [
            [
                "a121562e04632241"
            ]
        ]
    },
    {
        "id": "445908a2db8b4404",
        "type": "function",
        "z": "cde9bf556ca805e7",
        "name": "function 7",
        "func": "let shift_eff = calcEff(msg.payload);\nlet gsph = Number(msg.payload[0].count)/ 7.083;\nlet object_keys = Object.keys(msg.payload[9].sum);\nlet shift = \"\";\nlet date = new Date;\nlet hour = date.getHours();\n\nlet totaldowntime = msg.payload[9].sum\n\nif (hour == 13){\n    shift = \"D\";\n\n}\nelse if (hour == 21){\n\n    shift = \"A\";\n}\nelse shift = \"N\";\n\n\n\nmsg.payload = {\n\n    day : date.getDate(),\n    shift_gsph: gsph,\n    avg_eff : shift_eff,\n    current_shift: shift,\n    downtime: totaldowntime\n\n}\n\nreturn msg;\n\nnode.warn(totaldowntime);\n\n\n\n\n\n\n\nfunction calcDowntime(keys){\n\n    let hours = 0;\n    let mins = 0;\n    let secs = 0;\n    if(keys.includes(\"hours\")){\n        hours = msg.payload[9].sum.hours;\n\n    }else hours = 0;\n    if(keys.includes(\"minutes\")){\n        mins = msg.payload[9].sum.minutes;\n    }else mins = 0;\n    if (keys.includes(\"seconds\")){\n        secs = msg.payload[9].sum.seconds ;\n\n    }else secs = 0;\n\n    let totaldowntime = 60*60*hours + 60* mins +secs;\n\n    return totaldowntime;\n\n\n\n}\n\n\n\n\n\n\n\nfunction calcEff(arr){\n\n\nlet len = arr.length - 2;\nlet sum = 0;\n\nfor (let i = 1; i < arr.length-1; i++){\n\n    sum +=msg.payload[i].efficiency\n}\nnode.warn(sum);\nlet eff = sum/len;\n\nreturn eff;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 580,
        "wires": [
            [
                "7269230f2114c527"
            ]
        ]
    },
    {
        "id": "94391f1be6dbfe2e",
        "type": "function",
        "z": "cde9bf556ca805e7",
        "name": "function 8",
        "func": "",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 740,
        "wires": [
            [
                "88ee03dcd9127c02"
            ]
        ]
    },
    {
        "id": "88ee03dcd9127c02",
        "type": "postgresql",
        "z": "cde9bf556ca805e7",
        "name": "",
        "query": "{{{msg.payload}}}",
        "postgreSQLConfig": "6034ba1e7c15fb9e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 530,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "7f7d82681a34d30e",
        "type": "inject",
        "z": "cde9bf556ca805e7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 740,
        "wires": [
            [
                "94391f1be6dbfe2e"
            ]
        ]
    },
    {
        "id": "7269230f2114c527",
        "type": "postgresql",
        "z": "cde9bf556ca805e7",
        "name": "",
        "query": "INSERT INTO shiftdata(day, gsph, avg_eff,shift, totaldowntime )\nVALUES('{{{msg.payload.day}}}',{{{payload.shift_gsph}}},{{{msg.payload.avg_eff}}}, {{{msg.payload.downtime}}}  )",
        "postgreSQLConfig": "6034ba1e7c15fb9e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 890,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "ca1ac204874f1c83",
        "type": "link in",
        "z": "c6238f4648e04a71",
        "name": "(Downtime FB) Press angle in",
        "links": [
            "a4d4a07606b95a9c"
        ],
        "x": 85,
        "y": 240,
        "wires": [
            [
                "3ae92b49f2a7e593"
            ]
        ]
    },
    {
        "id": "64ec4cb0f059f48d",
        "type": "postgresql",
        "z": "c6238f4648e04a71",
        "name": "",
        "query": "INSERT INTO downtime(startdate, enddate ) \nVALUES('{{{msg.payload.startdate}}}'::timestamptz, '{{{msg.payload.enddate}}}'::timestamptz);",
        "postgreSQLConfig": "6034ba1e7c15fb9e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1170,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "f726fb9bd416c0c6",
        "type": "function",
        "z": "c6238f4648e04a71",
        "name": "Downtime logic",
        "func": "if (context.get('downtime_started') == undefined){\n    context.set('downtime_started', false);\n}\n\n\nif (!flow.get('p04_production_state') && !context.get('downtime_started')){\n    let date = new Date;\n    date.setSeconds(date.getSeconds() - 30);    \n    let str = date.toISOString();\n    context.set('startdate', str);\n    context.set('downtime_started', true)\n    \n}\n\nif(flow.get('p04_production_state') && context.get('downtime_started')){\n    let date = new Date;\n    let str = date.toISOString();\n    msg.payload = {\n        startdate: context.get('startdate'),\n        enddate: str\n    }\n\n    context.set('downtime_started', false);\n\n    return msg;\n    \n}\n\n\nif (msg.payload == \"END OF SHIFT\" && context.get('downtime_started')){\n\n    let date = new Date;\n    let str = date.toISOString();\n    msg.payload = {\n        startdate: context.get('startdate'),\n        enddate: str\n    }\n\n    context.set('startdate', str);\n\n    return msg;\n\n\n\n}\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 240,
        "wires": [
            [
                "64ec4cb0f059f48d"
            ]
        ]
    },
    {
        "id": "52e8254bf2427aa5",
        "type": "controltimer",
        "z": "c6238f4648e04a71",
        "name": "",
        "timerType": "delay",
        "timerDurationUnit": "second",
        "timerDurationType": "num",
        "timerDuration": 5,
        "timerLoopTimeoutUnit": "second",
        "timerLoopTimeoutType": "num",
        "timerLoopTimeout": 0,
        "loopTimeoutMessageType": "str",
        "loopTimeoutMessage": "LOOP_TIMEOUT",
        "timerMaxLoopIterationsType": "num",
        "timerMaxLoopIterations": 0,
        "loopMaxIterationsMessageType": "str",
        "loopMaxIterationsMessage": "MAX_LOOP_ITERATIONS",
        "isRunningTimerProgressVisible": true,
        "outputReceivedMessageOnTimerTrigger": true,
        "outputReceivedMessageOnTimerHalt": false,
        "startTimerOnReceivalOfUnknownMessage": true,
        "resetTimerOnReceivalOfUnknownMessage": true,
        "resetTimerOnReceivalOfStartAction": false,
        "continueTimerOnReceivalOfStartAction": false,
        "isDebugModeEnabled": false,
        "timerTriggeredMessageType": "str",
        "timerTriggeredMessage": "TIMER_TRIGGERED",
        "timerHaltedMessageType": "str",
        "timerHaltedMessage": "TIMER_HALTED",
        "isStartActionEnabled": true,
        "isStopActionEnabled": true,
        "isResetActionEnabled": true,
        "isPauseActionEnabled": true,
        "isContinueActionEnabled": true,
        "actionPropertyNameType": "str",
        "actionPropertyName": "payload",
        "startActionNameType": "str",
        "startActionName": "START",
        "stopActionNameType": "str",
        "stopActionName": "STOP",
        "resetActionNameType": "str",
        "resetActionName": "RESET",
        "pauseActionNameType": "str",
        "pauseActionName": "PAUSE",
        "continueActionNameType": "str",
        "continueActionName": "CONTINUE",
        "x": 380,
        "y": 240,
        "wires": [
            [
                "201ff3d15d08dccc"
            ],
            []
        ]
    },
    {
        "id": "ec1e2775b20959bb",
        "type": "function",
        "z": "c6238f4648e04a71",
        "name": "Check Press State",
        "func": "// if (flow.get('p04_production_state') == undefined){\n// flow.set('p04_production_state', false)\n// }\n\n\nflow.set('p04_production_state', true);\nmsg.payload = flow.get('p04_production_state');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 300,
        "wires": [
            [
                "022310190439f221"
            ]
        ]
    },
    {
        "id": "201ff3d15d08dccc",
        "type": "change",
        "z": "c6238f4648e04a71",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "p04_production_state",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 240,
        "wires": [
            [
                "f726fb9bd416c0c6"
            ]
        ]
    },
    {
        "id": "87fad215bbb8dc2e",
        "type": "cronplus",
        "z": "c6238f4648e04a71",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "str",
                "payload": "END OF SHIFT",
                "expressionType": "cron",
                "expression": "45 5,13,21 * * * ",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 380,
        "y": 340,
        "wires": [
            [
                "022310190439f221"
            ]
        ]
    },
    {
        "id": "3ae92b49f2a7e593",
        "type": "function",
        "z": "c6238f4648e04a71",
        "name": "function 5",
        "func": "if (context.get('last_angle') == undefined){\n\n    context.set('last_angle', 0);\n\n\n\n}\n\n\nif (msg.payload != context.get('last_angle'))\n{\n    context.set('last_angle', msg.payload);\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 240,
        "wires": [
            [
                "52e8254bf2427aa5"
            ]
        ]
    },
    {
        "id": "4e618ae9b1485194",
        "type": "cronplus",
        "z": "c6238f4648e04a71",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 * * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 240,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "a3bc6ba5cd691287",
        "type": "function",
        "z": "c6238f4648e04a71",
        "name": "function 9",
        "func": "\nlet totaldowntime =0;\n\nnode.warn(totaldowntime);\n\n\n\n\n\n\n\nfunction calcDowntime(keys){\n\n    let hours = 0;\n    let mins = 0;\n    let secs = 0;\n    if(keys.includes(\"hours\")){\n        hours = msg.payload[9].sum.hours;\n\n    }else hours = 0;\n    if(keys.includes(\"minutes\")){\n        mins = msg.payload[9].sum.minutes;\n    }else mins = 0;\n    if (keys.includes(\"seconds\")){\n        secs = msg.payload[9].sum.seconds ;\n\n    }else secs = 0;\n\n    let totaldowntime = 60*60*hours + 60* mins +secs;\n\n    return totaldowntime;\n\n\n\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 480,
        "wires": [
            []
        ]
    }
]